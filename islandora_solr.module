<?php

/**
 * @file
 * Implementation of Solr search for the Islandora fedora_search module.
 */

use Drupal\Core\Form\FormStateInterface;

use  Drupal\islandora_solr\IslandoraSolrQueryProcessor;

define('ISLANDORA_SOLR_SEARCH_PATH', 'islandora/search');
define('ISLANDORA_SOLR_QUERY_SPLIT_REGEX', '/(?<!\\\\) /');
define('ISLANDORA_SOLR_QUERY_FIELD_VALUE_SPLIT_REGEX', '/(?<!\\\\):/');

const ISLANDORA_SOLR_QUERY_FACET_LUCENE_ESCAPE_REGEX_DEFAULT = '/(\+|-|&&|\|\||!|\(|\)|\{|\}|\[|\]|\^| |~|\*|\?|\:|"|\\\\|\\/)/';

const ISLANDORA_SOLR_FACET_BUCKET_CLASSES_HOOK_BASE = 'islandora_solr_facet_bucket_classes';

const ISLANDORA_SOLR_BREADCRUMB_BACKEND = 'islandora_solr_breadcrumb_backend';

// Includes functions for common db queries.
require_once dirname(__FILE__) . '/includes/db.inc';
// Includes functions for common tasks.
require_once dirname(__FILE__) . '/includes/utilities.inc';
// Includes functions to create Islandora Solr blocks.
require_once dirname(__FILE__) . '/includes/blocks.inc';
// Includes functions for advanced facet functionality.
require_once dirname(__FILE__) . '/includes/facets.inc';
// Includes functions for connecting to Solr and Luke.
require_once dirname(__FILE__) . '/includes/luke.inc';

/**
 * Implements hook_theme().
 */
function islandora_solr_theme() {
  $path = drupal_get_path('module', 'islandora_solr');
  $file = 'theme.inc';

  return [
    // Advanced solr search form/block.
    'islandora_solr_advanced_search_form' => [
      'variables' => [
        'form' => NULL,
      ],
    ],
    // Results page.
    'islandora_solr_wrapper' => [
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-wrapper',
      'variables' => [
        'results' => NULL,
        'secondary_profiles' => NULL,
        'elements' => [],
      ],
    ],
    // Default results display.
    'islandora_solr' => [
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr',
      'variables' => [
        'results' => NULL,
        'elements' => [],
        'pids' => [],
      ],
    ],
     // Default facet.
    'islandora_solr_facet' => [
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-facet',
      'variables' => ['buckets' => NULL, 'hidden' => FALSE, 'pid' => NULL],
    ],
     // Facet wrapper.
    'islandora_solr_facet_wrapper' => [
      'path' => $path . '/theme',
      'file' => $file,
      'variables' => ['title' => NULL, 'content' => NULL, 'pid' => NULL],
    ],
     // Range slider.
    'islandora_solr_range_slider' => [
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-range-slider',
      'variables' => [
        'form_key' => NULL,
        'gap' => NULL,
        'range_from' => NULL,
        'range_to' => NULL,
      ],
    ],
    'islandora_solr_search_navigation_block' => [
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-search-navigation-block',
      'variables' => [
        'return_link' => NULL,
        'prev_link' => NULL,
        'next_link' => NULL,
        'prev_text' => NULL,
        'return_text' => NULL,
        'next_text' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_islandora_solr_primary_display().
 */
function islandora_solr_islandora_solr_primary_display() {
  return [
    'default' => [
      'name' => t('List (default)'),
      'module' => 'islandora_solr',
      'file' => 'includes/results.inc',
      'class' => "IslandoraSolrResults",
      'function' => "displayResults",
      'description' => t("Display search results as a list view"),
    ],
  ];
}

/**
 * Page callback: Islandora Solr.
 *
 * Gathers url parameters, and calls the query builder, which prepares the query
 * based on the admin settings and url values.
 * Finds the right display and calls the IslandoraSolrRestuls class to build the
 * display, which it returns to the page.
 *
 * @global IslandoraSolrQueryProcessor $_islandora_solr_queryclass
 *   The IslandoraSolrQueryProcessor object which includes the current query
 *   settings and the raw Solr results.
 *
 * @param string $query
 *   The query string.
 *
 * @return string
 *   A rendered Solr display
 *
 * @see hook_menu()
 */
function islandora_solr($query = NULL, $params = NULL) {
  global $_islandora_solr_queryclass;
  // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
//
//
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_css(drupal_get_path('module', 'islandora_solr') . '/css/islandora_solr.theme.css');


  // Url parameters.
  if ($params === NULL) {
    $params = $_GET;
  }
  // Get profiles.
  $primary_profiles = \Drupal::moduleHandler()->invokeAll('islandora_solr_primary_display');
  $secondary_profiles = \Drupal::moduleHandler()->invokeAll('islandora_solr_secondary_display');

  // Get the preferred display profile.
  // Order:
  // - $_GET['display'].
  // - The default primary display profile.
  // - Third choice is the base IslandoraSolrResults.
  $enabled_profiles = array();
  // Get enabled displays.
  // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/islandora_solr.settings.yml and config/schema/islandora_solr.schema.yml.
$primary_display_array = \Drupal::config('islandora_solr.settings')->get('islandora_solr_primary_display_table');
  // If it's set, we take these values.
  if (isset($primary_display_array['enabled'])) {
    foreach ($primary_display_array['enabled'] as $key => $value) {
      if ($key === $value) {
        $enabled_profiles[] = $key;
      }
    }
  }
  // Set primary display.
  // Check if display param is an valid, enabled profile; otherwise, show
  // default.
  if (isset($params['display']) && in_array($params['display'], $enabled_profiles)) {
    $islandora_solr_primary_display = $params['display'];
  }
  else {
    $islandora_solr_primary_display = \Drupal::config('islandora_solr.settings')->get('islandora_solr_primary_display');
    // Unset invalid parameter.
    unset($params['display']);
  }
  $params['islandora_solr_search_navigation'] = \Drupal::config('islandora_solr.settings')->get('islandora_solr_search_navigation');

  // !!! Set the global variable. !!!
  $_islandora_solr_queryclass = new IslandoraSolrQueryProcessor();

  // Build and execute Apache Solr query.
  $_islandora_solr_queryclass->buildAndExecuteQuery($query, $params);

  if (empty($_islandora_solr_queryclass->islandoraSolrResult)) {
    return t('Error searching Solr index.');
  }

  // TODO: Also filter secondary displays against those checked in the
  // configuration options.
  if (isset($params['solr_profile']) && isset($secondary_profiles[$params['solr_profile']])) {
    $profile = $secondary_profiles[$_GET['solr_profile']];
  }
  elseif (isset($primary_profiles[$islandora_solr_primary_display])) {
    $profile = $primary_profiles[$islandora_solr_primary_display];
  }
  else {
    drupal_set_message(\Drupal\Component\Utility\Html::escape(t('There is an error in the Solr search configuration: the display profile is not found.')), 'error');
    $profile = $primary_profiles['default'];
  }

  if (isset($profile['file'])) {
    // Include the file for the display profile.
    require_once drupal_get_path('module', $profile['module']) . '/' . $profile['file'];
  }

  // Get display class and function from current display.
  $solr_class = $profile['class'];
  $solr_function = $profile['function'];

  // Check if the display's class exists.
  $use_default_display = TRUE;
  if (class_exists($solr_class)) {
    $implementation = new $solr_class();
    // Check if the display's method exists.
    if (method_exists($implementation, $solr_function)) {
      // Implement results.
      $output = $implementation->$solr_function($_islandora_solr_queryclass);
      $use_default_display = FALSE;
    }
  }

  // Class and method could not be found, so use default.
  if ($use_default_display) {
    $results_class = new IslandoraSolrResults();
    $output = $results_class->displayResults($_islandora_solr_queryclass);
  }

  // Debug dump.
  if (\Drupal::config('islandora_solr.settings')->get('islandora_solr_debug_mode')) {
    $message = t('Parameters: <br /><pre>!debug</pre>', array('!debug' => print_r($_islandora_solr_queryclass->solrParams, TRUE)));
    drupal_set_message(\Drupal\Component\Utility\Xss::filter($message, array('pre', 'br')), 'status');
  }
  return $output;
}

/**
 * Check if the current context is the search results page.
 *
 * @todo Checking for display might not be the best way to do this. Need to
 *   review the way blocks are created.
 *
 * @param object $islandora_solr_query
 *   The IslandoraSolrQueryProcessor object which includes the current query
 *   settings but at the beginning of
 *   IslandoraSolrQueryProcessor::executeQuery().
 *
 * @return bool
 *   Returns TRUE if the context is the search results page. FALSE if not.
 */
function islandora_solr_results_page($islandora_solr_query) {

  if (isset($islandora_solr_query->display)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_forms().
 */
function islandora_solr_forms($form_id, $args) {
  $forms = array();

  if (strpos($form_id, 'islandora_solr_admin') === 0) {
    module_load_include('inc', 'islandora_solr', 'includes/admin');

    // Handle two form using the same building function, but allowing each to
    // be altered separately.
    if (in_array($form_id, array(
      'islandora_solr_admin_settings_search_fields',
      'islandora_solr_admin_settings_sort_fields',
    ))) {
      $forms[$form_id] = array(
        'callback' => 'islandora_solr_admin_settings_search_or_sort_fields',
      );
    }
  }
  // Check if the form_id passed to drupal_get_form() contains the string
  // 'islandora_solr_search_date_filter_form'.
  if (strpos($form_id, 'islandora_solr_date_filter_form') !== FALSE) {
    module_load_include('inc', 'islandora_solr', 'includes/facets');
    $forms[$form_id] = array(
      'callback' => 'islandora_solr_date_filter_form',
      'callback arguments' => array($args[0]),
    );
  }

  // Check if the form_id passed to drupal_get_form() contains the string
  // 'islandora_solr_range_slider_form'.
  if (strpos($form_id, 'islandora_solr_range_slider_form') !== FALSE) {
    module_load_include('inc', 'islandora_solr', 'includes/facets');
    $forms[$form_id] = array(
      'callback' => 'islandora_solr_range_slider_form',
      'callback arguments' => array($args[0]),
    );
  }

  return $forms;
}

/**
 * Implements hook_features_api().
 */
function islandora_solr_features_api() {
  $mod_path = drupal_get_path('module', 'islandora_solr');
  return array(
    'islandora_solr_fields' => array(
      'name' => t('Islandora Solr Fields Configuration'),
      'file' => "$mod_path/includes/fields.features.inc",
      'default_hook' => 'islandora_solr_fields_features_default_fields',
      'feature_source' => TRUE,
    ),
  );
}

/**
 * Check if dismax is configured for the currently selected request handler.
 *
 * Results are cached, to reduce chatter between Drupal and Solr.
 *
 * @param bool $reset
 *   Force cache revalidation.
 *
 * @return bool
 *   TRUE if the current request handler supports dismax, FALSE if it does not.
 */
function islandora_solr_check_dismax($reset = FALSE) {
  $cache_id = 'islandora_solr_dismax';
  $cache = $reset ? FALSE : \Drupal::cache()->get($cache_id);
  if (!$cache) {
    module_load_include('inc', 'islandora_solr', 'includes/admin');
    $solr_url = \Drupal::config('islandora_solr.settings')->get('islandora_solr_url');
    $handler = \Drupal::config('islandora_solr.settings')->get('islandora_solr_request_handler');
    $dismax = _islandora_solr_check_dismax($solr_url, $handler);
    \Drupal::cache()->set($cache_id, $dismax);
    return $dismax;
  }
  else {
    return $cache->data;
  }
}

/**
 * Implements hook_islandora_basic_collection_query_backends().
 */
function islandora_solr_islandora_basic_collection_query_backends() {
  $module_path = drupal_get_path('module', 'islandora_solr');
  return [
    'islandora_solr_query_backend' => [
      'title' => t('Solr'),
      'callable' => 'islandora_solr_islandora_basic_collection_backend_callable',
      'file' => "$module_path/includes/utilities.inc",
    ],
  ];
}

/**
 * Implements hook_islandora_object_purged().
 */
function islandora_solr_islandora_object_purged($pid) {
  // XXX: Optional ability to have the system remove the object from the Solr
  // index.  Useful for pages that may rely on a solr query for displaying data
  // and require the index update to be instantaneous so that the object is not
  // included in any query results immediately after a purge.
  if (\Drupal::config('islandora_solr.settings')->get('islandora_solr_force_update_index_after_object_purge') == 1) {
    $options = [
      'body' => "<update><delete><id>{$pid}</id></delete><commit/></update>",
      'headers' => ['Content-Type' => 'text/xml; charset=UTF-8'],
    ];
    $client = \Drupal::httpClient();
    $client->request(
      'POST',
      \Drupal::config('islandora_solr.settings')->get('islandora_solr_url') . '/update',
      $options
    );
  }
}

/**
 * Implements hook_islandora_basic_collection_build_manage_object().
 */
function islandora_solr_islandora_basic_collection_build_manage_object(array $form, $object) {
  if (\Drupal::config('islandora_solr.settings')->get('islandora_solr_individual_collection_sorting')) {
    $form['manage_collection_object']['manage_collection_solr_sort'] = [
      '#id' => 'manage-collection-solr-sort',
      '#group' => 'manage_collection_solr_sort',
      '#access' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Set Solr Sort String'),
      'form' => \Drupal::formBuilder()->getForm('Drupal\islandora_solr\Form\IslandoraSolrManageCollectionSortForm', $object),
    ];
    return $form;
  }
}

/**
 * Implements hook_form_islandora_basic_collection_admin_alter().
 */
function islandora_solr_form_islandora_basic_collection_admin_alter(&$form, FormStateInterface $form_state, $form_id) {
  $states = [
    'visible' => [
      ':input[name="islandora_basic_collection_display_backend"]' => ['value' => 'islandora_solr_query_backend'],
    ],
  ];
  $form['display_generation_details']['islandora_collection_display']['islandora_solr_collection_sort'] = [
    '#type' => 'textfield',
    '#title' => t('Sort field for collection query'),
    '#size' => 100,
    '#description' => t('One or more non-multivalued Solr fields to sort by when using the Solr collection query backend (by convention, multivalued fields have names that contain "_m" plus another letter at the end of their Solr names). Add " asc" or " desc" after each fieldname. If this setting is empty, the Solr default query sort will be used.'),
    '#default_value' => \Drupal::config('islandora_solr.settings')->get('islandora_solr_collection_sort'),
    '#states' => $states,
  ];
  $form['display_generation_details']['islandora_collection_display']['islandora_solr_individual_collection_sorting'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow individual sort strings per-collection'),
    '#description' => t('Allows per-collection sort strings to be configured. These sort strings can be set on the collection configuration page for individual collection objects.'),
    '#default_value' => \Drupal::config('islandora_solr.settings')->get('islandora_solr_individual_collection_sorting'),
    '#states' => $states,
  ];
  $form['display_generation_details']['islandora_collection_display']['islandora_solr_collection_sort_block_override'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow Solr sort block to override collection sort'),
    '#description' => t('Allows Solr sort block to override collection and default collection sort settings.'),
    '#default_value' => \Drupal::config('islandora_solr.settings')->get('islandora_solr_collection_sort_block_override'),
    '#states' => $states,
  ];
  $form['display_generation_details']['islandora_collection_display']['islandora_solr_collection_result_limit_block_override'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow Solr result limit block to override collection limit'),
    '#description' => t('Allows Solr result limit block to override the default collection limit.'),
    '#default_value' => \Drupal::config('islandora_solr.settings')->get('islandora_solr_collection_result_limit_block_override'),
    '#states' => $states,
  ];
  $form['#submit'][] = 'islandora_solr_form_islandora_basic_collection_admin_submit';
}

/**
 * Submit handler for the collection admin page additions.
 */
function islandora_solr_form_islandora_basic_collection_admin_submit($form, FormStateInterface $form_state) {
  $config = \Drupal::configFactory()->getEditable('islandora_solr.settings');
  $config->set('islandora_solr_collection_sort', $form_state->getValue('islandora_solr_collection_sort'));
  $config->set('islandora_solr_individual_collection_sorting', $form_state->getValue('islandora_solr_individual_collection_sorting'));
  $config->set('islandora_solr_collection_sort_block_override', $form_state->getValue('islandora_solr_collection_sort_block_override'));
  $config->set('islandora_solr_collection_result_limit_block_override', $form_state->getValue('islandora_solr_collection_result_limit_block_override'));
  $config->save();
}

/**
 * Implements hook_islandora_breadcrumbs_backends().
 */
function islandora_solr_islandora_breadcrumbs_backends() {
  $module_path = drupal_get_path('module', 'islandora_solr');
  return [
    ISLANDORA_SOLR_BREADCRUMB_BACKEND => [
      'title' => t('Islandora Solr'),
      'callable' => 'islandora_solr_islandora_breadcrumbs_backends_callable',
      'file' => "$module_path/includes/breadcrumbs.inc",
    ],
  ];
}
