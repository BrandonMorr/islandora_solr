<?php

/**
 * @file
 * Implementation of Solr search for the Islandora fedora_search module.
 */

//$islandora_query;
$_islandora_solr_queryclass;


/**
 * islandora solr search implentation of hook_init()
 * @global IslandoraSolrQueryProcessor $_islandora_solr_queryclass
 * @staticvar boolean $islandora_solr_init
 */
function islandora_solr_init() {
  // include inc files
  module_load_include('inc', 'islandora_solr', 'islandora_solr.admin');
  module_load_include('inc', 'islandora_solr', 'islandora_solr.block');
  module_load_include('inc', 'islandora_solr', 'includes/common');
   
  static $islandora_solr_init = FALSE;
  if (!$islandora_solr_init) {
    // single underscore followed by the module and another underscore
    global $_islandora_solr_queryclass;
    if (empty($_islandora_solr_queryclass)) {
      $_islandora_solr_queryclass = new IslandoraSolrQueryProcessor();
    }
    $islandora_solr_init = TRUE;
  }
}

/**
 * 
 * @global type $conf 
 */
function islandora_solr_boot() {
  global $conf;

  // Allow i18n, by using multilingual variables.
  if (module_exists('i18n')) {
    $vars = array(
      'islandora_solr_facets',
      'islandora_solr_result_fields',
      'islandora_solr_searchterms'
    );

    $conf['i18n_variables'] = (isset($conf['i18n_variables']) && is_array($conf['i18n_variables'])) ? 
      array_merge($vars, $conf['i18n_variables']):
      $vars;
  }
}

/**
 * Implementation of hook_menu().
 */
function islandora_solr_menu() {
  $items['islandora/search'] = array(
    'page callback' => 'islandora_solr',
    'access arguments' => array('view fedora collection'), //depends of fedora_repository view
    'type' => MENU_CALLBACK,
  );

  $items['admin/islandora/search/islandora_solr'] = array(
    'title' => 'Islandora Solr Client',
    'description' => 'Managing Islandora Solr Searching',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_solr_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'islandora_solr.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );



  return $items;
}


/**
 * Implements hook_admin_paths().
 */
function islandora_solr_admin_paths() {
  $paths = array(
    'admin/config/islandora_solr_search' => TRUE,
  );
  return $paths;
}


/**
 * Implementation of hook_theme().
 */
function islandora_solr_theme() {
  // set path
  $path = drupal_get_path('module', 'islandora_solr');
  $file = 'islandora_solr.theme.inc';

  return array(
    // advanced solr search form/block
    'islandora_solr_block_form' => array(
      'variables' => array(
        'form' => NULL,
      ),
    ),
    // theme admin form
    'islandora_solr_admin_primary_display' => array(
      'path' => $path,
      'file' => 'islandora_solr.admin.inc',
      'render element' => 'form',
    ),
    // results page
    'islandora_solr_wrapper' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-wrapper',
      'variables' => array('results' => NULL, 'secondary_profiles' => NULL,  'elements' => array()),
    ),
    // default results display
    'islandora_solr' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr',
      'variables' => array('results' => NULL, 'elements' => array()),
    ),
  );
}

/**
 * Implements hook_islandora_solr_primary_display()
 */
function islandora_solr_islandora_solr_primary_display() {
  return array(
    // 'machine-name' = array(
    //   'name' => 'Human Readable Name',
    //   'module' => 'module_name',
    //   'file' => 'FileName.inc',
    //   'class' => 'ClassName',
    //   'function' => 'function_name',
    //   'description' => 'A description of the display profile',
    //   'configuration' => 'path/to/configuration/page',
    // );
    //
    // Note: this class should either be, or extend, the class IslandoraSolrResults.
    //
    'default' => array(
      'name' => t('Fields (default)'),
      'module' => 'islandora_solr',
      'file' => 'IslandoraSolrResults.inc',
      'class' => "IslandoraSolrResults",
      'function' => "displayResults",
      'description' => t("A simple output."),
    ),
  );
}




/**
 * islandora solr search
 * @global type $_islandora_solr_queryclass
 * @param type $query
 * @param type $fq
 * @param type $dismax
 * @return type
 */
function islandora_solr($query = NULL) {
  global $_islandora_solr_queryclass;
  
  // set title
  drupal_set_title(t('Search Results'));
  
  // get all url parameters
  $params = $_GET;
 
  // get profiles
  $primary_profiles = module_invoke_all('islandora_solr_primary_display');
  $secondary_profiles = module_invoke_all('islandora_solr_secondary_display');
  
// Get the preferred display profile
  // Order: First choice is what's in the ?profile query var
  //        Second choice is the primary display profile
  //        Third choice is the default IslandoraSolrResults
  $enabled_profiles = array();
  // get enabled displays
  $primary_display_array = variable_get('islandora_solr_primary_display_table', array());
  // if it's set, we take these values
  if (isset($primary_display_array['enabled'])) {
    foreach ($primary_display_array['enabled'] as $key => $value) {
      if ($key === $value) {
        $enabled_profiles[] = $key;
      }
    }
  }

  // Set primary display
  // check if display param is an valid, enabled profile. Else show default.
  if (isset($params['display']) AND in_array($params['display'], $enabled_profiles)) {
    $islandora_solr_primary_display = $params['display'];
  }
  else {
    $islandora_solr_primary_display = variable_get('islandora_solr_primary_display', 'default');
    // unset invalid parameter
    unset($params['display']);
  }
  

  // Build and execute Apache Solr query
  $queryResult = $_islandora_solr_queryclass->buildAndExecuteQuery($query, $params);

  // TODO: Also filter secondary displays against those checked in the configuration options.
  if (isset($_GET['solr_profile']) AND isset($secondary_profiles[$_GET['solr_profile']])) {
    $profile = $secondary_profiles[$_GET['solr_profile']];
  }
  elseif (isset($primary_profiles[$islandora_solr_primary_display])) {
    $profile = $primary_profiles[$islandora_solr_primary_display];
  }
  else {
    drupal_set_message(check_plain(t('There is an error in the solr search configuration: the display profile is not found.')), 'error');
    $profile = $primary_profiles['default'];
  }
  // Include the file for the display profile
  require_once(drupal_get_path('module', $profile['module']) . '/' . $profile['file']);

  // Set display class and function vars
  $solrClass = $profile['class'];
  $solrFunction = $profile['function'];

  $nope = FALSE;

  if (class_exists($solrClass)) {
    $implementation = new $solrClass();
  }
  else {
    $nope = TRUE;
  }

  if (!$nope && method_exists($implementation, $solrFunction)) {
    $output = $implementation->$solrFunction($_islandora_solr_queryclass);
  }
  else {
    $nope = TRUE;
  }

  if ($nope) {

    $resultsClass = new IslandoraSolrResults();
    $output = $resultsClass->displayResults($_islandora_solr_queryclass);
  }

  if (variable_get('islandora_solr_debug_mode', 0)) { // debug dump
    drupal_set_message(t('Params: <br/><pre>!debug</pre>', array('!debug' => print_r($_islandora_solr_queryclass->solrParams, TRUE))), 'status');
  }

  return $output;
}

/**
 * Implementation of hook_help().
 */
function islandora_solr_help($path, $arg) {
  switch ($path) {
    case 'admin/help#islandora_solr':
      return t(
          '<p>
         The Islandora Solr Search extends the functionality of the Fedora_Repository module.
         This module allows one or more of a series of blocks to be configured to search a solr index.
         This module can co-exist with the original Fedora_Repositories search block, but Solr\'s
         additional functionality will normally make the original block redundant.
         </p>
         <p>
         The !guide contains additonal information.
         </p>
         <ul>
           <li>Islandora Solr Search requires a working Solr instance. The !sWiki has full setup instructions</li>
           <li>Once Solr is running and tested, configure <b>Gsearch</b> to update Solr. Consult the !GSearch for details.</li>
           <li>Retreive the !client, unzip it, and copy the <b>Solr</b> directory from the archive to the islandora_solr module\'s folder.</li>
           <li>Go to Administer &gt; Site Configuration &gt; Islandora Solr Client <em>(or click the link below)</em> to configure the module. Set which Solr request handler to use, set the port, host and context for the index to be queried, and select which fields are to be used for filtering. Solr\'s <b>schema.xml</b> and  <b>solrconfig.xml</b> must be configured for the request handler as well as which  fields to index and return.</li>
           <li>The module allows custom code to be used to display search results.&nbsp; If custom PHP code is used, the paths to that codes\'s file and function must be entered here as well.</li>
           <li>Three different blocks are now available under Administer &gt; Site Building &gt; Blocks:&nbsp; Islandora Solr Simple Search Block, Islandora Solr Facet Block, and Islandora Solr Search Block.&nbsp; The configuration setting for each of these blocks will allow you to control their position on the screen, and on which pages they will be displayed.</li>
           <li>The Islandora Solr Simple Search Block will use will add  defType=dismax to the configured request handler. The request handler tag in <b>solrconfig.xml</b> must have an attribute of <b>default="TRUE"</b>.</li>
         </ul>
        ', array(
        '!guide' => l('Islandora Guide', 'https://wiki.duraspace.org/display/ISLANDORA/Islandora+Guide'),
        '!sWiki' => l("Solr Wiki", 'http://wiki.apache.org/solr/SolrTomcat'),
        '!GSearch' => l('GSearch Documentation', 'https://wiki.duraspace.org/display/FCSVCS/Generic+Search+Service+2.2'),
        '!client' => l('Apache Solr php client', 'http://code.google.com/p/solr-php-client'),
          )
      );
  }
}





/**
 *
 * @param String $solr_url
 * @return boolean
 *
 * Checks availability of Solr installation
 *
 */
function islandora_solr_ping($solr_url) {
  // check for 'http://' or 'https://' prefix
  $solr_url = islandora_solr_check_http($solr_url);

  // check for valid url string.
  if (!filter_var($solr_url, FILTER_VALIDATE_URL)) {
    return FALSE;
  }

  
  
  // split url in host/port/path
  $solr_url_parsed = parse_url($solr_url);
  
  // if it's not a correct url for solr to check, return false.
  if (!isset($solr_url_parsed['host']) OR !isset($solr_url_parsed['port'])) {
    return FALSE;
  }
  
  // call solr
  $solr_service = new Apache_Solr_Service($solr_url_parsed['host'], $solr_url_parsed['port'], $solr_url_parsed['path'] . '/');
  
  // ping solr
  $ping = $solr_service->ping();

  // if a ping time is returned
  if ($ping) {
    // Add 0.1 ms to the ping time so we never return 0.0.
    return $ping + 0.01;
  }

  return FALSE;
}



function islandora_solr_check_http($url) {
  
  // check for 'http://' or 'https://' prefix - if not found, add it.
  if (strpos($url, "http://") === FALSE AND strpos($url, "https://") === FALSE) {
    $url = 'http://' . $url;
  }
  return $url;
}





